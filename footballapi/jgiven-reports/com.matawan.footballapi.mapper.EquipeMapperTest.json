{
  "className": "com.matawan.footballapi.mapper.EquipeMapperTest",
  "name": "Equipe Mapper",
  "scenarios": [
    {
      "className": "com.matawan.footballapi.mapper.EquipeMapperTest",
      "testMethodName": "testMappingEquipeVersDto",
      "description": "Le mapping d\u0027une équipe en DTO doit produire un résultat correct",
      "tagIds": [],
      "explicitParameters": [],
      "derivedParameters": [],
      "casesAsTable": false,
      "scenarioCases": [
        {
          "caseNr": 1,
          "steps": [
            {
              "name": "une équipe avec nom, budget, acronyme et un joueur existe",
              "words": [
                {
                  "value": "Given",
                  "isIntroWord": true
                },
                {
                  "value": "une équipe avec nom, budget, acronyme et un joueur existe"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 5956000,
              "depth": 0,
              "parentFailed": false
            },
            {
              "name": "on convertit l\u0027entité en DTO",
              "words": [
                {
                  "value": "When",
                  "isIntroWord": true
                },
                {
                  "value": "on convertit l\u0027entité en DTO"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 944600,
              "depth": 0,
              "parentFailed": false
            },
            {
              "name": "le DTO est correctement rempli",
              "words": [
                {
                  "value": "Then",
                  "isIntroWord": true
                },
                {
                  "value": "le DTO est correctement rempli"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 44851800,
              "depth": 0,
              "parentFailed": false
            }
          ],
          "explicitArguments": [],
          "derivedArguments": [],
          "status": "SUCCESS",
          "durationInNanos": 67105200
        }
      ],
      "durationInNanos": 67105200,
      "executionStatus": "SUCCESS"
    },
    {
      "className": "com.matawan.footballapi.mapper.EquipeMapperTest",
      "testMethodName": "testMappingAvecAssertionsFausses",
      "description": "Le mapping échoue si les données attendues sont incorrectes",
      "tagIds": [],
      "explicitParameters": [],
      "derivedParameters": [],
      "casesAsTable": false,
      "scenarioCases": [
        {
          "caseNr": 1,
          "steps": [
            {
              "name": "une équipe avec nom, budget, acronyme et un joueur existe",
              "words": [
                {
                  "value": "Given",
                  "isIntroWord": true
                },
                {
                  "value": "une équipe avec nom, budget, acronyme et un joueur existe"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 523000,
              "depth": 0,
              "parentFailed": false
            },
            {
              "name": "on effectue le mapping de l\u0027équipe en DTO",
              "words": [
                {
                  "value": "When",
                  "isIntroWord": true
                },
                {
                  "value": "on effectue le mapping de l\u0027équipe en DTO"
                }
              ],
              "status": "PASSED",
              "durationInNanos": 317500,
              "depth": 0,
              "parentFailed": false
            },
            {
              "name": "le DTO contient des informations erronées",
              "words": [
                {
                  "value": "Then",
                  "isIntroWord": true
                },
                {
                  "value": "le DTO contient des informations erronées"
                }
              ],
              "status": "FAILED",
              "durationInNanos": 6285200,
              "depth": 0,
              "parentFailed": false
            }
          ],
          "explicitArguments": [],
          "derivedArguments": [],
          "status": "FAILED",
          "errorMessage": "org.opentest4j.AssertionFailedError: \r\nexpected: \"Real Madrid\"\r\n but was: \"Paris Saint-Germain\"",
          "stackTrace": [
            "com.matawan.footballapi.mapper.EquipeMapperThen.resultatInvalide(EquipeMapperThen.java:37)",
            "com.matawan.footballapi.mapper.EquipeMapperThen$ByteBuddy$FoSyjUk8.resultatInvalide$accessor$HUBRraiB(Unknown Source)",
            "com.matawan.footballapi.mapper.EquipeMapperThen$ByteBuddy$FoSyjUk8$auxiliary$H2UtCjcK.call(Unknown Source)",
            "com.matawan.footballapi.mapper.EquipeMapperThen$ByteBuddy$FoSyjUk8.resultatInvalide(Unknown Source)",
            "com.matawan.footballapi.mapper.EquipeMapperTest.testMappingAvecAssertionsFausses(EquipeMapperTest.java:24)",
            "java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)",
            "org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:775)",
            "org.junit.platform.commons.support.ReflectionSupport.invokeMethod(ReflectionSupport.java:479)",
            "org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)",
            "org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)",
            "org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:161)",
            "org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:152)",
            "org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:91)",
            "org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:112)",
            "org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:94)",
            "org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)",
            "org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)",
            "org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)",
            "org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)",
            "org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:93)",
            "org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:87)",
            "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:216)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:212)",
            "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)",
            "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)",
            "org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)",
            "java.base/java.util.ArrayList.forEach(ArrayList.java:1596)",
            "org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)",
            "org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)",
            "java.base/java.util.ArrayList.forEach(ArrayList.java:1596)",
            "org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)",
            "org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)",
            "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)",
            "org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)",
            "org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)",
            "org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)",
            "org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:201)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:170)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:94)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:59)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:142)",
            "org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:58)",
            "org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)",
            "org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)",
            "org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)",
            "org.junit.platform.launcher.core.InterceptingLauncher.lambda$execute$1(InterceptingLauncher.java:39)",
            "org.junit.platform.launcher.core.ClasspathAlignmentCheckingLauncherInterceptor.intercept(ClasspathAlignmentCheckingLauncherInterceptor.java:25)",
            "org.junit.platform.launcher.core.InterceptingLauncher.execute(InterceptingLauncher.java:38)",
            "org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)",
            "org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)",
            "com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)",
            "com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)",
            "com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)",
            "com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)",
            "com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)",
            "com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)"
          ],
          "durationInNanos": 8158500
        }
      ],
      "durationInNanos": 8158500
    }
  ],
  "tagMap": {}
}